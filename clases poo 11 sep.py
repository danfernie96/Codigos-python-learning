# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GxssaP3Vl8b78uGjhAythhJPdc8OT-Tq

codigo original para conexion con base de datos
"""

import mysql.connector
from mysql.connector import *
import tkinter as tk
from tkinter import ttk, messagebox

def conectar():
    pass

def desconectar():
    pass

def insertar():
    pass

def buscar():
    pass

def modificar():
    pass

def borrar():
    pass

def limpiar():
    pass

#Instanciar una ventana
ventana = tk.Tk()

#Dimensiones de la ventana ancho x alto
ventana.geometry("500x300")

#Color de fondo de la ventana
ventana.configure(background="white")

#Título de la ventana
ventana.title("Gestión de libros")

#Etiquetas y campos de texto
ttk.Label(ventana, text="ISBN: ").grid(column=0, row=0)
entry_isbn = ttk.Entry(ventana)
entry_isbn.grid(column=1, row=0)

ttk.Label(ventana, text="Título: ").grid(column=0, row=1)
entry_titulo = ttk.Entry(ventana)
entry_titulo.grid(column=1, row=1)

ttk.Label(ventana, text="Autor: ").grid(column=0, row=2)
entry_autor = ttk.Entry(ventana)
entry_autor.grid(column=1, row=2)

ttk.Label(ventana, text="Disponibilidad: ").grid(column=0, row=3)
entry_dispo = ttk.Entry(ventana)
entry_dispo.grid(column=1, row=3)

#Botones
boton_buscar = ttk.Button(ventana, text="Buscar", command=buscar)
boton_buscar.grid(column=3, row=0)

boton_modificar = ttk.Button(ventana, text="Modificar", command=modificar)
boton_modificar.grid(column=3, row=1)

boton_insertar = ttk.Button(ventana, text="Insertar", command=insertar)
boton_insertar.grid(column=3, row=2)

boton_borrar = ttk.Button(ventana, text="Borrar", command=borrar)
boton_borrar.grid(column=3, row=3)

boton_limpiar = ttk.Button(ventana, text="Limpiar", command=limpiar)
boton_limpiar.grid(column=3, row=4)

#Visualizar la ventana
ventana.mainloop()

import mysql.connector
from mysql.connector import *
import tkinter as tk
from tkinter import ttk, messagebox

def conectar():
    try:
        mydb = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="app"
        )
        return mydb
    except Error as e:
        messagebox.showerror("Error",str(e))

def desconectar(self, mydb):
    mydb.close()

def insertar():
    mydb = conectar()
    myCursor = mydb.cursor()
    sql="INSERT INTO libro (isbn, titulo, autor, disponibilidad) VALUES (%s,%s,%s,%s)"
    val = (entry_isbn.get(), entry_titulo.get(), entry_autor.get(), entry_dispo.get())
    try:
        myCursor.execute(sql,val)
        mydb.commit()
        messagebox.showinfo("Información","Inserción exitosa")
        #limpiar()
    except Error as e:
        messagebox.showerror("Error", str(e))
    finally:
        mydb.close()

def buscar():
    mydb = conectar()
    myCursor = mydb.cursor()
    sql = "SELECT * FROM libro WHERE isbn=%s"
    val = (entry_isbn.get(),)
    try:
        myCursor.execute(sql,val)
        resultado = myCursor.fetchone()
        if resultado:
            entry_titulo.insert(0, resultado[1])
            entry_autor.insert(0, resultado[2])
            entry_dispo.insert(0, resultado[3])
        else:
            messagebox.showinfo("Información","No se encontró el libro")
    except Error as e:
        messagebox.showerror("Error", str(e))
    finally:
        mydb.close()

def modificar():
    pass

def borrar():
    pass

def limpiar():
    pass

#Instanciar una ventana
ventana = tk.Tk()

#Dimensiones de la ventana ancho x alto
ventana.geometry("500x300")

#Color de fondo de la ventana
ventana.configure(background="white")

#Título de la ventana
ventana.title("Gestión de libros")

#Etiquetas y campos de texto
ttk.Label(ventana, text="ISBN: ").grid(column=0, row=0)
entry_isbn = ttk.Entry(ventana)
entry_isbn.grid(column=1, row=0)

ttk.Label(ventana, text="Título: ").grid(column=0, row=1)
entry_titulo = ttk.Entry(ventana)
entry_titulo.grid(column=1, row=1)

ttk.Label(ventana, text="Autor: ").grid(column=0, row=2)
entry_autor = ttk.Entry(ventana)
entry_autor.grid(column=1, row=2)

ttk.Label(ventana, text="Disponibilidad: ").grid(column=0, row=3)
entry_dispo = ttk.Entry(ventana)
entry_dispo.grid(column=1, row=3)

#Botones
boton_buscar = ttk.Button(ventana, text="Buscar", command=buscar)
boton_buscar.grid(column=3, row=0)

boton_modificar = ttk.Button(ventana, text="Modificar", command=modificar)
boton_modificar.grid(column=3, row=1)

boton_insertar = ttk.Button(ventana, text="Insertar", command=insertar)
boton_insertar.grid(column=3, row=2)

boton_borrar = ttk.Button(ventana, text="Borrar", command=borrar)
boton_borrar.grid(column=3, row=3)

boton_limpiar = ttk.Button(ventana, text="Limpiar", command=limpiar)
boton_limpiar.grid(column=3, row=4)

#Visualizar la ventana
ventana.mainloop()

"""tabla interfaz visual biblioteca?

"""

import mysql.connector
from mysql.connector import *
import re
import tkinter as tk
from tkinter import ttk, messagebox

def conectar():
    try:
        mydb = mysql.connector.connect(
            host="localhost",
            user="root",
            password="",
            database="app"
        )
        return mydb
    except Error as e:
        messagebox.showerror("Error",str(e))

def limpiar():
    entry_isbn.delete(0, tk.END)
    entry_titulo.delete(0, tk.END)
    entry_autor.delete(0, tk.END)
    entry_dispo.delete(0, tk.END)

def desconectar(self, mydb):
    mydb.close()

def insertar():
    mydb = conectar()
    myCursor = mydb.cursor()
    sql="INSERT INTO libro (isbn, titulo, autor, disponibilidad) VALUES (%s,%s,%s,%s)"
    val = (entry_isbn.get(), entry_titulo.get(), entry_autor.get(), entry_dispo.get())
    try:
        myCursor.execute(sql,val)
        mydb.commit()
        messagebox.showinfo("Información","Inserción exitosa")
        limpiar()
    except Error as e:
        messagebox.showerror("Error", str(e))
    finally:
        mydb.close()

def buscar():
    mydb = conectar()
    myCursor = mydb.cursor()
    sql = "SELECT * FROM libro WHERE isbn=%s"
    val = (entry_isbn.get(),)
    try:
        myCursor.execute(sql,val)
        resultado = myCursor.fetchone()
        if resultado:
            entry_titulo.delete(0, tk.END)
            entry_titulo.insert(0, resultado[1])
            entry_autor.delete(0, tk.END)
            entry_autor.insert(0, resultado[2])
            entry_dispo.delete(0, tk.END)
            entry_dispo.insert(0, resultado[3])
        else:
            messagebox.showinfo("Información","No se encontró el libro")
    except Error as e:
        messagebox.showerror("Error", str(e))
    finally:
        mydb.close()

def modificar():
    mydb = conectar()
    myCursor = mydb.cursor()
    sql = "UPDATE libro SET titulo=%s, autor=%s, disponibilidad=%s WHERE isbn=%s"
    val = (entry_titulo.get(), entry_autor.get(), entry_dispo.get(), entry_isbn.get())
    try:
        myCursor.execute(sql,val)
        mydb.commit()
        messagebox.showinfo("Información", "Modificación exitosa")
        limpiar()
    except Error as e:
        messagebox.showerror("Error", str(e))
    finally:
        mydb.close()

def borrar():
    mydb = conectar()
    myCursor = mydb.cursor()
    sql = "DELETE FROM libro WHERE isbn=%s"
    val = (entry_isbn.get(),)
    try:
        myCursor.execute(sql,val)
        mydb.commit()
        messagebox.showinfo("Información", "Borrado exitoso")
        limpiar()
    except Error as e:
        messagebox.showerror("Erro", str(e))
    finally:
        mydb.close()

#Instanciar una ventana
ventana = tk.Tk()

#Dimensiones de la ventana ancho x alto
ventana.geometry("500x300")

#Color de fondo de la ventana
ventana.configure(background="white")

#Título de la ventana
ventana.title("Gestión de libros")

#Etiquetas y campos de texto
ttk.Label(ventana, text="ISBN: ").grid(column=0, row=0)
entry_isbn = ttk.Entry(ventana)
entry_isbn.grid(column=1, row=0)

ttk.Label(ventana, text="Título: ").grid(column=0, row=1)
entry_titulo = ttk.Entry(ventana)
entry_titulo.grid(column=1, row=1)

ttk.Label(ventana, text="Autor: ").grid(column=0, row=2)
entry_autor = ttk.Entry(ventana)
entry_autor.grid(column=1, row=2)

ttk.Label(ventana, text="Disponibilidad: ").grid(column=0, row=3)
entry_dispo = ttk.Entry(ventana)
entry_dispo.grid(column=1, row=3)

#Botones
boton_buscar = ttk.Button(ventana, text="Buscar", command=buscar)
boton_buscar.grid(column=3, row=0)

boton_modificar = ttk.Button(ventana, text="Modificar", command=modificar)
boton_modificar.grid(column=3, row=1)

boton_insertar = ttk.Button(ventana, text="Insertar", command=insertar)
boton_insertar.grid(column=3, row=2)

boton_borrar = ttk.Button(ventana, text="Borrar", command=borrar)
boton_borrar.grid(column=3, row=3)

boton_limpiar = ttk.Button(ventana, text="Limpiar", command=limpiar)
boton_limpiar.grid(column=3, row=4)

#Visualizar la ventana
ventana.mainloop()

-- phpMyAdmin SQL Dump
-- version 5.2.1
-- https://www.phpmyadmin.net/
--
-- Servidor: 127.0.0.1
-- Tiempo de generación: 05-09-2024 a las 15:21:03
-- Versión del servidor: 10.4.32-MariaDB
-- Versión de PHP: 8.2.12

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Base de datos: app
--

-- --------------------------------------------------------

--
-- Estructura de tabla para la tabla libro
--

CREATE TABLE libro (
  isbn varchar(10) NOT NULL,
  titulo varchar(30) NOT NULL,
  autor varchar(30) NOT NULL,
  disponibilidad varchar(1) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;

--
-- Volcado de datos para la tabla libro
--

INSERT INTO libro (isbn, titulo, autor, disponibilidad) VALUES
('563254214', 'El coronel no tiene El coronel', 'Gabriel García Márquez', '1'),
('9865745', 'El Principito', 'Antoine de Saint-Exupéry', '1');

--
-- Índices para tablas volcadas
--

--
-- Indices de la tabla libro
--
ALTER TABLE libro
  ADD PRIMARY KEY (isbn);
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;